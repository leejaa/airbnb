{"version":3,"file":"static/webpack/static/development/pages/roomDetail.js.f9abbda64420f058c0d5.hot-update.js","sources":["webpack:///./components/Calendar2.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useMemo } from \"react\";\nimport { RightOutlined, LeftOutlined, ArrowRightOutlined, ArrowLeftOutlined } from '@ant-design/icons';\nimport { Calendar } from 'antd';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Room } from \"../generated/graphql\";\nimport '../assets/scss/room.scss';\nimport * as Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport _ from \"lodash\";\nimport { getDates } from \"../utils/utils\"\nlet moment = extendMoment(Moment);\nmoment.locale('ko');\ntype Props = {\n    room: Room\n};\nconst DAY_LIST = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\nconst Calendars2: React.FunctionComponent<Props> = ({\n    room\n}) => {\n    const [date, setDate] = useState(moment());\n    const [selectedDate, setSelectedDate] = useState([]);\n    const disableDate = useMemo(() => {\n        let disableDate : any = getDates({ startDate: moment().startOf('month').format('YYYY-MM-DD'), endDate: moment().add(-1, 'day') });\n        disableDate.push(room?.reservation.map(item => item.check_in));\n        disableDate = _.uniq(_.flatten(disableDate));\n        return disableDate;\n    }, []);\n    const dates = useMemo(() => {\n        const dates = getDates({ startDate: date.startOf('month').format('YYYY-MM-DD'), endDate: date.endOf('month') });\n        return dates;\n    }, [date]);\n    const onClickDate = useCallback((date) => {\n        console.log('date', date);\n        let startDate : any = '';\n        let endDate : any = '';\n        if ( _.isEmpty(selectedDate) ) {\n            startDate = date;\n            endDate = date;\n        } else {\n            startDate = _.minBy(selectedDate);\n            endDate = _.maxBy(selectedDate);\n            startDate = startDate < date ? startDate : date;\n            endDate = endDate < date ? date : endDate;\n        }\n        const newSelectedDate : any = getDates({ startDate, endDate });\n        setSelectedDate(newSelectedDate);\n    }, [selectedDate]);\n    const renderCell = useMemo(() => {\n        let cnt = 0;\n        return (\n            <div className=\"calendar2-container6\">\n                <div className=\"calendar2-container8\">\n                    {\n                        _.range(0, 7).map(index => {\n                            if (index < _.indexOf(DAY_LIST, moment(dates[0]).format('dddd'))) {\n                                return (\n                                    <div className=\"calendar2-container9\"></div>\n                                );\n                            } else if ( _.includes(disableDate, moment(dates[cnt]).format('YYYY-MM-DD')) ) {\n                                return (\n                                    <div className=\"calendar2-container7\">\n                                        <span className=\"calendar2-span2\">\n                                            <del>{moment(dates[cnt++]).format('D')}</del>\n                                        </span>\n                                    </div>\n                                );\n                            } else if ( _.includes(selectedDate, moment(dates[cnt]).format('YYYY-MM-DD')) ) {\n                                return (\n                                    <div className=\"calendar2-container10\" onClick={() => onClickDate(moment(dates[cnt]).format('YYYY-MM-DD'))}>\n                                        <span className=\"calendar2-span3\">\n                                            <del>{moment(dates[cnt++]).format('D')}</del>\n                                        </span>\n                                    </div>\n                                );\n                            } else { \n                                return (\n                                    <div className=\"calendar2-container7\" onClick={() => onClickDate(moment(dates[cnt]).format('YYYY-MM-DD'))}>\n                                        <span className=\"calendar2-span1\">\n                                            {moment(dates[cnt++]).format('D')}\n                                        </span>\n                                    </div>\n                                );\n                            }\n                        })\n                    }\n                </div>\n                {\n                    _.range(1, 6).map(index => {\n                        if (cnt < dates.length) {\n                            return (\n                                <div className=\"calendar2-container8\">\n                                    {\n                                        _.range(0, 7).map(index => {\n                                            if (cnt >= dates.length) {\n                                                return (\n                                                    <div className=\"calendar2-container9\"></div>\n                                                );\n                                            } else if ( _.includes(disableDate, moment(dates[cnt]).format('YYYY-MM-DD')) ) {\n                                                return (\n                                                    <div className=\"calendar2-container7\">\n                                                        <span className=\"calendar2-span2\">\n                                                            <del>{moment(dates[cnt++]).format('D')}</del>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            } else if ( _.includes(selectedDate, moment(dates[cnt]).format('YYYY-MM-DD')) ) {\n                                                return (\n                                                    <div className=\"calendar2-container10\" onClick={() => onClickDate(moment(dates[cnt]).format('YYYY-MM-DD'))}>\n                                                        <span className=\"calendar2-span3\">\n                                                            <del>{moment(dates[cnt++]).format('D')}</del>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            }  else {\n                                                return (\n                                                    <div className=\"calendar2-container7\" onClick={() => onClickDate(cnt)}>\n                                                        <span className=\"calendar2-span1\">\n                                                            {moment(dates[cnt++]).format('D')}\n                                                        </span>\n                                                    </div>\n                                                );\n                                            }\n                                        })\n                                    }\n                                </div>\n                            );\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n            </div>\n        );\n    }, [date, selectedDate, disableDate]);\n    const goLeft = useCallback(() => {\n        const newDate : any = _.clone(date).add(-1, 'day');\n        setDate(newDate);\n    }, [date]);\n    const goRight = useCallback(() => {\n        const newDate : any = _.clone(date).add(1, 'day');\n        setDate(newDate);\n    }, [date]);\n    return (\n        <div className=\"calendar2-container1\">\n            <div className=\"calendar2-container2\">\n                <div className=\"calendar2-container3\" onClick={goLeft}>\n                    <ArrowLeftOutlined style={{ fontSize: '18px', color: '#9ca1a2' }} />\n                </div>\n                <div className=\"calendar2-container4\">\n                    <span style={{ fontWeight: 'bold', fontSize: '1em' }}>{`${date.format('YYYY')}년 ${date.format('M')}월`}</span>\n                </div>\n                <div className=\"calendar2-container3\" onClick={goRight}>\n                    <ArrowRightOutlined style={{ fontSize: '18px', color: '#9ca1a2' }} />\n                </div>\n            </div>\n            <div className=\"calendar2-container5\">\n                <div>일</div>\n                <div>월</div>\n                <div>화</div>\n                <div>수</div>\n                <div>목</div>\n                <div>금</div>\n                <div>토</div>\n            </div>\n            {renderCell}\n        </div>\n    );\n}\n\nexport default Calendars2;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}