{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport { IS_PRODUCTION, API_PRODUCTION, API_DEVELOPMENT } from \"../env\";\n\nconst isServer = () => true;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      serverAccessToken,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client\n    }));\n  };\n\n  if (false) {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      let serverAccessToken = \"\"; // if (isServer()) {\n      //   const cookies = cookie.parse(req.headers.cookie);\n      //   if (cookies.jid) {\n      //     const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n      //       method: \"POST\",\n      //       credentials: \"include\",\n      //       headers: {\n      //         cookie: \"jid=\" + cookies.jid\n      //       }\n      //     });\n      //     const data = await response.json();\n      //     serverAccessToken = data.accessToken;\n      //   }\n      // }\n      // // Run all GraphQL queries in the component tree\n      // // and extract the resulting data\n      // const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n      //   {},\n      //   serverAccessToken\n      // ));\n\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // // Only on the server\n      // if (typeof window === \"undefined\") {\n      //   // When redirecting, the response is finished.\n      //   // No point in continuing to render\n      //   if (res && res.finished) {\n      //     return {};\n      //   }\n      //   if (ssr) {\n      //     try {\n      //       // Run all GraphQL queries\n      //       const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n      //       await getDataFromTree(\n      //         <AppTree\n      //           pageProps={{\n      //             ...pageProps,\n      //             apolloClient\n      //           }}\n      //           apolloClient={apolloClient}\n      //         />\n      //       );\n      //     } catch (error) {\n      //       // Prevent Apollo Client GraphQL errors from crashing SSR.\n      //       // Handle them in components via the data.error prop:\n      //       // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n      //       console.error(\"Error while running `getDataFromTree`\", error);\n      //     }\n      //   }\n      //   // getDataFromTree does not call componentWillUnmount\n      //   // head side effect therefore need to be cleared manually\n      //   Head.rewind();\n      // }\n      // // Extract query data from the Apollo store\n      // const apolloState = apolloClient.cache.extract();\n\n      return _objectSpread({}, pageProps);\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}, serverAccessToken) {\n  const httpLink = new HttpLink({\n    uri: IS_PRODUCTION ? `${API_PRODUCTION}/graphql` : `${API_DEVELOPMENT}/graphql`,\n    credentials: \"include\",\n    fetch\n  });\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n\n        if (_Date$now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  const authLink = setContext((_request, {\n    headers\n  }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? `bearer ${token}` : \"\"\n      })\n    };\n  });\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}