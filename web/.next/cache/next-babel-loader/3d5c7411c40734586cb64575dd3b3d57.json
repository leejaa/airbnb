{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const SelectRoomsDocument = gql`\n    query selectRooms($skip: Float!, $take: Float!) {\n  selectRooms(skip: $skip, take: $take) {\n    id\n    name\n    city\n    address\n    description\n    price\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\nexport function useSelectRoomsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SelectRoomsDocument, baseOptions);\n}\nexport function useSelectRoomsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SelectRoomsDocument, baseOptions);\n}\nexport const SelectAllRoomsDocument = gql`\n    query selectAllRooms {\n  selectAllRooms {\n    id\n    name\n    description\n    country\n    city\n    price\n    address\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\nexport function useSelectAllRoomsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SelectAllRoomsDocument, baseOptions);\n}\nexport function useSelectAllRoomsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SelectAllRoomsDocument, baseOptions);\n}\nexport const CreateRoomDocument = gql`\n    mutation createRoom($options: RoomInput!) {\n  createRoom(options: $options) {\n    id\n    houseType\n    houseRadio\n    convenience\n    dates\n    lat\n    lng\n    address\n    post_code\n  }\n}\n    `;\nexport function useCreateRoomMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreateRoomDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n    refreshToken\n  }\n}\n    `;\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LogoutDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    name\n  }\n}\n    `;\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $name: String) {\n  register(email: $email, password: $password, name: $name)\n}\n    `;\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}\nexport const RequestAuthEmailDocument = gql`\n    mutation RequestAuthEmail($email: String!, $message: String!) {\n  requestAuthEmail(email: $email, message: $message)\n}\n    `;\nexport function useRequestAuthEmailMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RequestAuthEmailDocument, baseOptions);\n}\nexport const NewEmailDocument = gql`\n    subscription newEmail {\n  newEmail\n}\n    `;\nexport function useNewEmailSubscription(baseOptions) {\n  return ApolloReactHooks.useSubscription(NewEmailDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    avatar\n    email\n    roomConnection {\n      id\n      name\n      description\n      photoConnection {\n        id\n        file\n        caption\n      }\n    }\n  }\n}\n    `;\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}