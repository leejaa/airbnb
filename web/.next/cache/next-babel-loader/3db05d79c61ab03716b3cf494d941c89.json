{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport * as firebase from 'firebase';\nexport const ImageUpload = ({\n  state,\n  dispatch\n}) => {\n  const {\n    0: preview,\n    1: setPreview\n  } = useState('');\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps,\n    inputRef\n  } = useDropzone({\n    accept: 'image/jpeg, image/png'\n  });\n\n  const fileUpload = files => {\n    // File or Blob named mountains.jpg\n    const file = files[0]; // Create a root reference\n\n    const storageRef = firebase.storage().ref(); // Create the file metadata\n\n    const metadata = {\n      contentType: 'image/jpeg'\n    }; // Upload file and metadata to the object 'images/mountains.jpg'\n\n    const uploadTask = storageRef.child('images/' + file.path).put(file, metadata); // Listen for state changes, errors, and completion of the upload.\n\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n    function (snapshot) {\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log('Upload is ' + progress + '% done');\n\n      switch (snapshot.state) {\n        case firebase.storage.TaskState.PAUSED:\n          // or 'paused'\n          console.log('Upload is paused');\n          break;\n\n        case firebase.storage.TaskState.RUNNING:\n          // or 'running'\n          console.log('Upload is running');\n          break;\n      }\n    }, function (error) {\n      console.log('error', error); // A full list of error codes is available at\n      // https://firebase.google.com/docs/storage/web/handle-errors\n\n      switch (error.code) {\n        case 'storage/unauthorized':\n          // User doesn't have permission to access the object\n          break;\n\n        case 'storage/canceled':\n          // User canceled the upload\n          break;\n\n        case 'storage/unknown':\n          // Unknown error occurred, inspect error.serverResponse\n          break;\n      }\n    }, function () {\n      // Upload completed successfully, now we can get the download URL\n      uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n        if (downloadURL) {\n          console.log('downloadURL', downloadURL);\n          dispatch({\n            type: 'setImageUrl',\n            value: downloadURL\n          });\n        }\n      });\n    });\n  };\n\n  const addFile = file => {\n    const files = file.map(file => _Object$assign(file, {\n      preview: URL.createObjectURL(file)\n    }));\n    fileUpload(files);\n  };\n\n  const onDrop = (accepted, rejected) => {\n    if (_Object$keys(rejected).length !== 0) {\n      const message = \"Please submit valid file type\";\n    } else {\n      addFile(accepted);\n      setPreview(accepted[0].preview);\n      const blobPromise = new _Promise((resolve, reject) => {\n        const reader = new window.FileReader();\n        reader.readAsDataURL(accepted[0]);\n\n        reader.onloadend = () => {\n          const base64data = reader.result;\n          resolve(base64data);\n        };\n      });\n      blobPromise.then(value => {// console.log('value', value);\n      });\n    }\n  };\n\n  return __jsx(Dropzone, {\n    onDrop: (accepted, rejected) => onDrop(accepted, rejected)\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => __jsx(\"div\", {\n    className: \"container\",\n    style: {\n      borderWidth: 2,\n      borderColor: 'rgb(187, 187, 187)',\n      borderStyle: 'dashed',\n      height: 500,\n      padding: 170\n    }\n  }, __jsx(\"div\", getRootProps({\n    className: 'dropzone',\n    onDrop: event => event.stopPropagation()\n  }), __jsx(\"input\", getInputProps()), __jsx(\"label\", {\n    className: \"w-64 flex flex-col items-center px-4 py-6 bg-red-500 text-white font-extrabold rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer hover:bg-blue hover:text-white\"\n  }, __jsx(\"svg\", {\n    className: \"w-8 h-8\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\"\n  }, __jsx(\"path\", {\n    d: \"M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z\"\n  })), __jsx(\"span\", {\n    className: \"mt-2 text-base leading-normal\"\n  }, \"\\uC0AC\\uC9C4 \\uC5C5\\uB85C\\uB4DC\")), __jsx(\"span\", {\n    className: \"mt-2 text-base leading-normal\"\n  }, \"\\uB610\\uB294 \\uC0AC\\uC9C4\\uC744 \\uB4DC\\uB798\\uADF8\\uD558\\uC138\\uC694.\"))));\n};","map":null,"metadata":{},"sourceType":"module"}