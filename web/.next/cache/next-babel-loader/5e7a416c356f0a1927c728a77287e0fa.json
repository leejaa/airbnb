{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/leejahun/practice/airbnb/web/lib/apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\nimport { IS_PRODUCTION, API_PRODUCTION, API_DEVELOPMENT } from \"../env\";\n\nconst isServer = () => true;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      serverAccessToken,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      let serverAccessToken = \"\";\n\n      if (isServer()) {\n        // const cookies : any = cookie.parse(`${req.headers.cookie}`);\n        // if (cookies.jid) {\n        //   const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        //     method: \"POST\",\n        //     credentials: \"include\",\n        //     headers: {\n        //       cookie: \"jid=\" + cookies.jid\n        //     }\n        //   });\n        //   const data = await response.json();\n        //   serverAccessToken = data.accessToken;\n        // }\n        const cookies = cookie.parse(`${req.headers.cookie}`);\n        console.log('cookies.jid', cookies.jid);\n\n        if (cookies.jid) {\n          const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n              cookie: \"jid=\" + cookies.jid\n            }\n          });\n          const data = await response.json();\n          serverAccessToken = data.accessToken;\n          const refreshToken = data.refreshToken;\n          console.log('refreshToken', refreshToken);\n          localStorage.setItem('refreshToken', refreshToken);\n        }\n      } // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n\n      const apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              apolloClient: apolloClient,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState,\n        serverAccessToken\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}, serverAccessToken) {\n  const httpLink = new HttpLink({\n    uri: IS_PRODUCTION ? `${API_PRODUCTION}/graphql` : `${API_DEVELOPMENT}/graphql`,\n    credentials: \"include\",\n    fetch\n  });\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n\n        if (_Date$now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  const authLink = setContext((_request, {\n    headers\n  }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? `bearer ${token}` : \"\"\n      })\n    };\n  });\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState),\n    connectToDevTools: true\n  });\n}","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb/web/lib/apollo.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","TokenRefreshLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","cookie","IS_PRODUCTION","API_PRODUCTION","API_DEVELOPMENT","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","cookies","parse","headers","log","jid","response","method","credentials","data","json","accessToken","refreshToken","localStorage","setItem","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","fetchAccessToken","handleFetch","handleError","err","authLink","_request","authorization","errorLink","graphQLErrors","networkError","ssrMode","link","from","restore","connectToDevTools"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,eAA/C;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,eAAxC,QAA+D,QAA/D;;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AAEA;;;;;;;;;;AAQA,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAwC;AAAEC,EAAAA,GAAG,GAAG;AAAR,IAAiB,EAAzD,EAA6D;AAClE,QAAMC,UAAU,GAAG,UAKR;AAAA,QALS;AAClBC,MAAAA,YADkB;AAElBC,MAAAA,iBAFkB;AAGlBC,MAAAA;AAHkB,KAKT;AAAA,QADNC,SACM;;AACT,QAAI,CAACR,QAAQ,EAAT,IAAe,CAACR,cAAc,EAAlC,EAAsC;AACpCC,MAAAA,cAAc,CAACa,iBAAD,CAAd;AACD;;AACD,UAAMG,MAAM,GAAGJ,YAAY,IAAIK,gBAAgB,CAACH,WAAD,CAA/C;AACA,WAAO,MAAC,aAAD,eAAmBC,SAAnB;AAA8B,MAAA,YAAY,EAAEC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAXD;;AAYA,YAA2C;AACzC;AACA,UAAME,WAAW,GACfT,aAAa,CAACS,WAAd,IAA6BT,aAAa,CAACU,IAA3C,IAAmD,WADrD,CAFyC,CAKzC;;AACA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBE,MAAAA,OAAO,CAACC,IAAR,CAAa,qDAAb;AACD,KARwC,CAUzC;;;AACAV,IAAAA,UAAU,CAACO,WAAX,GAA0B,cAAaA,WAAY,GAAnD;AACD;;AAED,MAAIR,GAAG,IAAID,aAAa,CAACa,eAAzB,EAA0C;AACxCX,IAAAA,UAAU,CAACW,eAAX,GAA6B,MAAOC,GAAP,IAAoB;AAC/C,YAAM;AACJC,QAAAA,OADI;AAEJD,QAAAA,GAAG,EAAE;AAAEE,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AAFD,UAGFH,GAHJ;AAKA,UAAIV,iBAAiB,GAAG,EAAxB;;AAEA,UAAIN,QAAQ,EAAZ,EAAgB;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAMoB,OAAa,GAAGxB,MAAM,CAACyB,KAAP,CAAc,GAAEH,GAAG,CAACI,OAAJ,CAAY1B,MAAO,EAAnC,CAAtB;AACAiB,QAAAA,OAAO,CAACU,GAAR,CAAY,aAAZ,EAA2BH,OAAO,CAACI,GAAnC;;AACA,YAAIJ,OAAO,CAACI,GAAZ,EAAiB;AACf,gBAAMC,QAAQ,GAAG,MAAMpC,KAAK,CAACQ,aAAa,GAAI,GAAEC,cAAe,gBAArB,GAAwC,GAAEC,eAAgB,gBAAxE,EAAyF;AACnH2B,YAAAA,MAAM,EAAE,MAD2G;AAEnHC,YAAAA,WAAW,EAAE,SAFsG;AAGnHL,YAAAA,OAAO,EAAE;AACP1B,cAAAA,MAAM,EAAE,SAASwB,OAAO,CAACI;AADlB;AAH0G,WAAzF,CAA5B;AAOA,gBAAMI,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAvB,UAAAA,iBAAiB,GAAGsB,IAAI,CAACE,WAAzB;AACA,gBAAMC,YAAY,GAAGH,IAAI,CAACG,YAA1B;AACAlB,UAAAA,OAAO,CAACU,GAAR,CAAY,cAAZ,EAA4BQ,YAA5B;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCF,YAArC;AACD;AACF,OAtC8C,CAwC/C;AACA;;;AACA,YAAM1B,YAAY,GAAIW,GAAG,CAACA,GAAJ,CAAQX,YAAR,GAAuBK,gBAAgB,CAC3D,EAD2D,EAE3DJ,iBAF2D,CAA7D;AAKA,YAAME,SAAS,GAAGN,aAAa,CAACa,eAAd,GACd,MAAMb,aAAa,CAACa,eAAd,CAA8BC,GAA9B,CADQ,GAEd,EAFJ,CA/C+C,CAmD/C;;AACA,gBAAmC;AACjC;AACA;AACA,YAAIG,GAAG,IAAIA,GAAG,CAACe,QAAf,EAAyB;AACvB,iBAAO,EAAP;AACD;;AAED,YAAI/B,GAAJ,EAAS;AACP,cAAI;AACF;AACA,kBAAM;AAAEgC,cAAAA;AAAF,gBAAsB,MAAM,OAAO,mBAAP,CAAlC;AACA,kBAAMA,eAAe,CACnB,MAAC,OAAD;AACE,cAAA,SAAS,oBACJ3B,SADI;AAEPH,gBAAAA;AAFO,gBADX;AAKE,cAAA,YAAY,EAAEA,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADmB,CAArB;AASD,WAZD,CAYE,OAAO+B,KAAP,EAAc;AACd;AACA;AACA;AACAvB,YAAAA,OAAO,CAACuB,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD;AACF,SA1BgC,CA4BjC;AACA;;;AACApD,QAAAA,IAAI,CAACqD,MAAL;AACD,OAnF8C,CAqF/C;;;AACA,YAAM9B,WAAW,GAAGF,YAAY,CAACiC,KAAb,CAAmBC,OAAnB,EAApB;AAEA,+BACK/B,SADL;AAEED,QAAAA,WAFF;AAGED,QAAAA;AAHF;AAKD,KA7FD;AA8FD;;AAED,SAAOF,UAAP;AACD;AAED,IAAIC,YAAwD,GAAG,IAA/D;AAEA;;;;;AAIA,SAASK,gBAAT,CAA0B8B,SAA1B,EAA0ClC,iBAA1C,EAAsE;AACpE;AACA;AACA,MAAIN,QAAQ,EAAZ,EAAgB;AACd,WAAOyC,kBAAkB,CAACD,SAAD,EAAYlC,iBAAZ,CAAzB;AACD,GALmE,CAOpE;;;AACA,MAAI,CAACD,YAAL,EAAmB;AACjB;AACAA,IAAAA,YAAY,GAAGoC,kBAAkB,CAACD,SAAD,CAAjC;AACD;;AAED,SAAOnC,YAAP;AACD;AAED;;;;;;;AAKA,SAASoC,kBAAT,CAA4BC,YAAY,GAAG,EAA3C,EAA+CpC,iBAA/C,EAA2E;AACzE,QAAMqC,QAAQ,GAAG,IAAIxD,QAAJ,CAAa;AAC5ByD,IAAAA,GAAG,EAAE/C,aAAa,GAAI,GAAEC,cAAe,UAArB,GAAkC,GAAEC,eAAgB,UAD1C;AAE5B4B,IAAAA,WAAW,EAAE,SAFe;AAG5BtC,IAAAA;AAH4B,GAAb,CAAjB;AAMA,QAAMwD,WAAW,GAAG,IAAIvD,gBAAJ,CAAqB;AACvCwD,IAAAA,gBAAgB,EAAE,aADqB;AAEvCC,IAAAA,uBAAuB,EAAE,MAAM;AAC7B,YAAMC,KAAK,GAAGxD,cAAc,EAA5B;;AAEA,UAAI,CAACwD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AAED,UAAI;AACF,cAAM;AAAEC,UAAAA;AAAF,YAAU1D,SAAS,CAACyD,KAAD,CAAzB;;AACA,YAAI,eAAcC,GAAG,GAAG,IAAxB,EAA8B;AAC5B,iBAAO,KAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF,OAPD,CAOE,MAAM;AACN,eAAO,KAAP;AACD;AACF,KAnBsC;AAoBvCC,IAAAA,gBAAgB,EAAE,MAAM;AACtB,aAAO7D,KAAK,CAACQ,aAAa,GAAI,GAAEC,cAAe,gBAArB,GAAwC,GAAEC,eAAgB,gBAAxE,EAAyF;AACnG2B,QAAAA,MAAM,EAAE,MAD2F;AAEnGC,QAAAA,WAAW,EAAE;AAFsF,OAAzF,CAAZ;AAID,KAzBsC;AA0BvCwB,IAAAA,WAAW,EAAErB,WAAW,IAAI;AAC1BrC,MAAAA,cAAc,CAACqC,WAAD,CAAd;AACD,KA5BsC;AA6BvCsB,IAAAA,WAAW,EAAEC,GAAG,IAAI;AAClBxC,MAAAA,OAAO,CAACC,IAAR,CAAa,+CAAb;AACAD,MAAAA,OAAO,CAACuB,KAAR,CAAciB,GAAd;AACD;AAhCsC,GAArB,CAApB;AAmCA,QAAMC,QAAQ,GAAGlE,UAAU,CAAC,CAACmE,QAAD,EAAW;AAAEjC,IAAAA;AAAF,GAAX,KAA2B;AACrD,UAAM0B,KAAK,GAAGhD,QAAQ,KAAKM,iBAAL,GAAyBd,cAAc,EAA7D;AACA,WAAO;AACL8B,MAAAA,OAAO,oBACFA,OADE;AAELkC,QAAAA,aAAa,EAAER,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,KAAP;AAMD,GAR0B,CAA3B;AAUA,QAAMS,SAAS,GAAG/D,OAAO,CAAC,CAAC;AAAEgE,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AAC7D9C,IAAAA,OAAO,CAACU,GAAR,CAAYmC,aAAZ;AACA7C,IAAAA,OAAO,CAACU,GAAR,CAAYoC,YAAZ;AACD,GAHwB,CAAzB;AAKA,SAAO,IAAI1E,YAAJ,CAAiB;AACtB2E,IAAAA,OAAO,MADe;AACkB;AACxCC,IAAAA,IAAI,EAAElE,UAAU,CAACmE,IAAX,CAAgB,CAACjB,WAAD,EAAcS,QAAd,EAAwBG,SAAxB,EAAmCd,QAAnC,CAAhB,CAFgB;AAGtBL,IAAAA,KAAK,EAAE,IAAIpD,aAAJ,GAAoB6E,OAApB,CAA4BrB,YAA5B,CAHe;AAItBsB,IAAAA,iBAAiB,EAAE;AAJG,GAAjB,CAAP;AAMD","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\nimport { IS_PRODUCTION, API_PRODUCTION, API_DEVELOPMENT } from \"../env\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      if (isServer()) {\n        // const cookies : any = cookie.parse(`${req.headers.cookie}`);\n        // if (cookies.jid) {\n        //   const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        //     method: \"POST\",\n        //     credentials: \"include\",\n        //     headers: {\n        //       cookie: \"jid=\" + cookies.jid\n        //     }\n        //   });\n        //   const data = await response.json();\n        //   serverAccessToken = data.accessToken;\n        // }\n\n        const cookies : any = cookie.parse(`${req.headers.cookie}`);\n        console.log('cookies.jid', cookies.jid);\n        if (cookies.jid) {\n          const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n              cookie: \"jid=\" + cookies.jid\n            }\n          });\n          const data = await response.json();\n          serverAccessToken = data.accessToken;\n          const refreshToken = data.refreshToken;\n          console.log('refreshToken', refreshToken);\n          localStorage.setItem('refreshToken', refreshToken);\n        }\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const httpLink = new HttpLink({\n    uri: IS_PRODUCTION ? `${API_PRODUCTION}/graphql` : `${API_DEVELOPMENT}/graphql`,\n    credentials: \"include\",\n    fetch,\n  });\n\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const { exp } = jwtDecode(token);\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n\n  const authLink = setContext((_request, { headers }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `bearer ${token}` : \"\",\n      }\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState),\n    connectToDevTools: true,\n  });\n}"]},"metadata":{},"sourceType":"module"}