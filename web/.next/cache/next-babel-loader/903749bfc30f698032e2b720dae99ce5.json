{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure undefined\"); }\n\nimport React, { useEffect, useCallback } from \"react\";\nimport RoomCard from \"./RoomCard\";\nimport { useSelectRoomsQuery } from \"../generated/graphql\";\n\nvar RoomList = function RoomList(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useSelectRoomsQuery = useSelectRoomsQuery({\n    variables: {\n      skip: 0,\n      take: 12\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useSelectRoomsQuery.data,\n      loading = _useSelectRoomsQuery.loading,\n      fetchMore = _useSelectRoomsQuery.fetchMore,\n      networkStatus = _useSelectRoomsQuery.networkStatus,\n      refetch = _useSelectRoomsQuery.refetch;\n\n  if (!data) {\n    return React.createElement(\"div\", null, \"\\uB85C\\uB529\\uC911...\");\n  }\n\n  console.log('data', JSON.stringify(data));\n  var onScroll = useCallback(function () {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 10) {\n      fetchMore({\n        variables: {\n          skip: data.selectRooms.length,\n          take: data.selectRooms.length + 4\n        },\n        updateQuery: function updateQuery(pv, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            return pv;\n          }\n\n          return {\n            // __typename: \"Room\",\n            selectRooms: [].concat(_toConsumableArray(pv.selectRooms), _toConsumableArray(fetchMoreResult.selectRooms))\n          };\n        }\n      });\n    }\n  }, [data.selectRooms.length]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [data.selectRooms.length]);\n  return React.createElement(\"div\", {\n    className: \"container mx-auto pb-10\"\n  }, React.createElement(\"div\", {\n    className: \"rounded-xl -mx-40 h-50vh mb-24 bg-cover bg-center\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-wrap mx-5 my-16 mb-10 mt-24\"\n  }, data.selectRooms.map(function (room, i) {\n    return React.createElement(RoomCard, {\n      room: room,\n      key: room.id\n    });\n  }))));\n};\n\nexport default RoomList;","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb/web/components/RoomList.tsx"],"names":["React","useEffect","useCallback","RoomCard","useSelectRoomsQuery","RoomList","variables","skip","take","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","refetch","console","log","JSON","stringify","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","selectRooms","length","updateQuery","pv","fetchMoreResult","addEventListener","removeEventListener","map","room","i","id"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAAgE,OAAhE;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,mBAAT,QAAoC,sBAApC;;AAKA,IAAMC,QAAwC,GAAG,SAA3CA,QAA2C,OAE3C;AAAA;;AAAA,6BAC2DD,mBAAmB,CAAC;AAC7EE,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE;AAAjB,KADkE;AAE7EC,IAAAA,2BAA2B,EAAE;AAFgD,GAAD,CAD9E;AAAA,MACMC,IADN,wBACMA,IADN;AAAA,MACYC,OADZ,wBACYA,OADZ;AAAA,MACqBC,SADrB,wBACqBA,SADrB;AAAA,MACgCC,aADhC,wBACgCA,aADhC;AAAA,MAC+CC,OAD/C,wBAC+CA,OAD/C;;AAKF,MAAI,CAACJ,IAAL,EAAW;AACP,WACI,yDADJ;AAGH;;AACDK,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAApB;AACA,MAAMS,QAAQ,GAAGjB,WAAW,CAAC,YAAM;AAC/B,QAAIkB,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,EAArG,EAAyG;AACrGb,MAAAA,SAAS,CAAC;AACNN,QAAAA,SAAS,EAAE;AACPC,UAAAA,IAAI,EAAEG,IAAI,CAACgB,WAAL,CAAiBC,MADhB;AAEPnB,UAAAA,IAAI,EAAEE,IAAI,CAACgB,WAAL,CAAiBC,MAAjB,GAA0B;AAFzB,SADL;AAKNC,QAAAA,WAAW,EAAE,qBAACC,EAAD,SAA6B;AAAA,cAAtBC,eAAsB,SAAtBA,eAAsB;;AACtC,cAAI,CAACA,eAAL,EAAsB;AAClB,mBAAOD,EAAP;AACH;;AACD,iBAAO;AACH;AACAH,YAAAA,WAAW,+BACJG,EAAE,CAACH,WADC,sBAEJI,eAAe,CAACJ,WAFZ;AAFR,WAAP;AAOH;AAhBK,OAAD,CAAT;AAkBH;AACJ,GArB2B,EAqBzB,CAAEhB,IAAI,CAACgB,WAAL,CAAiBC,MAAnB,CArByB,CAA5B;AAsBA1B,EAAAA,SAAS,CAAC,YAAM;AACZmB,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCZ,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCb,QAArC;AACD,KAFD;AAGH,GALQ,EAKN,CAACT,IAAI,CAACgB,WAAL,CAAiBC,MAAlB,CALM,CAAT;AAMA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KAEQjB,IAAI,CAACgB,WAAL,CAAiBO,GAAjB,CAAqB,UAACC,IAAD,EAAOC,CAAP;AAAA,WACjB,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAED,IAAhB;AAA6B,MAAA,GAAG,EAAGA,IAAI,CAACE;AAAxC,MADiB;AAAA,GAArB,CAFR,CADJ,CADJ,CADJ;AAaH,CAtDD;;AAwDA,eAAe/B,QAAf","sourcesContent":["import { CircularProgress, List, ListItem, Paper } from \"@material-ui/core\";\nimport React, { useEffect, useCallback, useState, useRef } from \"react\";\nimport { Waypoint } from \"react-waypoint\";\nimport RoomCard from \"./RoomCard\";\nimport { useSelectRoomsQuery } from \"../generated/graphql\";\n\ntype Props = {\n};\n\nconst RoomList: React.FunctionComponent<Props> = ({\n\n}) => {\n    const { data, loading, fetchMore, networkStatus, refetch } = useSelectRoomsQuery({\n        variables: { skip: 0, take: 12 },\n        notifyOnNetworkStatusChange: true,\n    });\n    if (!data) {\n        return (\n            <div>로딩중...</div>\n        );\n    }\n    console.log('data', JSON.stringify(data));\n    const onScroll = useCallback(() => {\n        if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 10) {\n            fetchMore({\n                variables: {\n                    skip: data.selectRooms.length,\n                    take: data.selectRooms.length + 4\n                },\n                updateQuery: (pv, { fetchMoreResult }) => {\n                    if (!fetchMoreResult) {\n                        return pv;\n                    }\n                    return {\n                        // __typename: \"Room\",\n                        selectRooms: [\n                            ...pv.selectRooms,\n                            ...fetchMoreResult.selectRooms\n                        ]\n                    };\n                }\n            });\n        }\n    }, [ data.selectRooms.length ]);\n    useEffect(() => {\n        window.addEventListener('scroll', onScroll);\n        return () => {\n          window.removeEventListener('scroll', onScroll);\n        };\n    }, [data.selectRooms.length]);\n    return (\n        <div className=\"container mx-auto pb-10\">\n            <div className=\"rounded-xl -mx-40 h-50vh mb-24 bg-cover bg-center\">\n                <div className=\"flex flex-wrap mx-5 my-16 mb-10 mt-24\">\n                    {\n                        data.selectRooms.map((room, i) => (\n                            <RoomCard room={room as any} key={ room.id }/>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RoomList;"]},"metadata":{},"sourceType":"module"}