{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/leejahun/practice/airbnb/web/components/ImageUpload.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport * as firebase from 'firebase';\nexport const ImageUpload = ({\n  state,\n  dispatch\n}) => {\n  const {\n    0: preview,\n    1: setPreview\n  } = useState('');\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps,\n    inputRef\n  } = useDropzone({\n    accept: 'image/jpeg, image/png'\n  });\n\n  const fileUpload = files => {\n    // File or Blob named mountains.jpg\n    const file = files[0]; // Create a root reference\n\n    const storageRef = firebase.storage().ref(); // Create the file metadata\n\n    const metadata = {\n      contentType: 'image/jpeg'\n    }; // Upload file and metadata to the object 'images/mountains.jpg'\n\n    const uploadTask = storageRef.child('images/' + file.path).put(file, metadata); // Listen for state changes, errors, and completion of the upload.\n\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n    function (snapshot) {\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log('Upload is ' + progress + '% done');\n\n      switch (snapshot.state) {\n        case firebase.storage.TaskState.PAUSED:\n          // or 'paused'\n          console.log('Upload is paused');\n          break;\n\n        case firebase.storage.TaskState.RUNNING:\n          // or 'running'\n          console.log('Upload is running');\n          break;\n      }\n    }, function (error) {\n      console.log('error', error); // A full list of error codes is available at\n      // https://firebase.google.com/docs/storage/web/handle-errors\n\n      switch (error.code) {\n        case 'storage/unauthorized':\n          // User doesn't have permission to access the object\n          break;\n\n        case 'storage/canceled':\n          // User canceled the upload\n          break;\n\n        case 'storage/unknown':\n          // Unknown error occurred, inspect error.serverResponse\n          break;\n      }\n    }, function () {\n      // Upload completed successfully, now we can get the download URL\n      uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n        if (downloadURL) {\n          console.log('downloadURL', downloadURL);\n          dispatch({\n            type: 'setImageUrl',\n            value: downloadURL\n          });\n        }\n      });\n    });\n  };\n\n  const addFile = file => {\n    const files = file.map(file => _Object$assign(file, {\n      preview: URL.createObjectURL(file)\n    }));\n    fileUpload(files);\n  };\n\n  const onDrop = (accepted, rejected) => {\n    if (_Object$keys(rejected).length !== 0) {\n      const message = \"Please submit valid file type\";\n    } else {\n      addFile(accepted);\n      setPreview(accepted[0].preview);\n      const blobPromise = new _Promise((resolve, reject) => {\n        const reader = new window.FileReader();\n        reader.readAsDataURL(accepted[0]);\n\n        reader.onloadend = () => {\n          const base64data = reader.result;\n          resolve(base64data);\n        };\n      });\n      blobPromise.then(value => {// console.log('value', value);\n      });\n    }\n  };\n\n  return __jsx(Dropzone, {\n    onDrop: (accepted, rejected) => onDrop(accepted, rejected),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => __jsx(\"div\", {\n    className: \"container\",\n    style: {\n      borderWidth: 2,\n      borderColor: 'rgb(187, 187, 187)',\n      borderStyle: 'dashed',\n      height: 500,\n      padding: 170\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(\"div\", _extends({}, getRootProps({\n    className: 'dropzone',\n    onDrop: event => event.stopPropagation()\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    className: \"w-64 flex flex-col items-center px-4 py-6 bg-red-500 text-white font-extrabold rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer hover:bg-blue hover:text-white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    className: \"w-8 h-8\",\n    fill: \"currentColor\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, __jsx(\"path\", {\n    d: \"M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), __jsx(\"span\", {\n    className: \"mt-2 text-base leading-normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\uC0AC\\uC9C4 \\uC5C5\\uB85C\\uB4DC\")), __jsx(\"span\", {\n    className: \"mt-2 text-base leading-normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"\\uB610\\uB294 \\uC0AC\\uC9C4\\uC744 \\uB4DC\\uB798\\uADF8\\uD558\\uC138\\uC694.\"))));\n};","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb/web/components/ImageUpload.tsx"],"names":["React","useState","Dropzone","useDropzone","firebase","ImageUpload","state","dispatch","preview","setPreview","acceptedFiles","rejectedFiles","getRootProps","getInputProps","inputRef","accept","fileUpload","files","file","storageRef","storage","ref","metadata","contentType","uploadTask","child","path","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","console","log","TaskState","PAUSED","RUNNING","error","code","getDownloadURL","then","downloadURL","type","value","addFile","map","URL","createObjectURL","onDrop","accepted","rejected","length","message","blobPromise","resolve","reject","reader","window","FileReader","readAsDataURL","onloadend","base64data","result","borderWidth","borderColor","borderStyle","height","padding","className","event","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport * as firebase from 'firebase';\n\nexport const ImageUpload = ({\n    state,\n    dispatch\n}: any) => {\n    const [preview, setPreview] = useState('');\n    const { acceptedFiles, rejectedFiles, getRootProps, getInputProps, inputRef } = useDropzone({\n        accept: 'image/jpeg, image/png'\n    });\n    const fileUpload = (files: any) => {\n        // File or Blob named mountains.jpg\n        const file = files[0];\n        // Create a root reference\n        const storageRef = firebase.storage().ref();\n        // Create the file metadata\n        const metadata = {\n            contentType: 'image/jpeg'\n        };\n        // Upload file and metadata to the object 'images/mountains.jpg'\n        const uploadTask = storageRef.child('images/' + file.path).put(file, metadata);\n\n        // Listen for state changes, errors, and completion of the upload.\n        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n            function (snapshot) {\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n                switch (snapshot.state) {\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\n                        console.log('Upload is paused');\n                        break;\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\n                        console.log('Upload is running');\n                        break;\n                }\n            }, function (error: any) {\n                console.log('error', error);\n                // A full list of error codes is available at\n                // https://firebase.google.com/docs/storage/web/handle-errors\n                switch (error.code) {\n                    case 'storage/unauthorized':\n                        // User doesn't have permission to access the object\n                        break;\n\n                    case 'storage/canceled':\n                        // User canceled the upload\n                        break;\n                    case 'storage/unknown':\n                        // Unknown error occurred, inspect error.serverResponse\n                        break;\n                }\n            }, function () {\n                // Upload completed successfully, now we can get the download URL\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    if (downloadURL) {\n                        console.log('downloadURL', downloadURL);\n                        dispatch({ type: 'setImageUrl', value: downloadURL });\n                    }\n                });\n            });\n    };\n    const addFile = (file: { map: (arg0: (file: any) => any) => void; }) => {\n        const files = file.map(file =>\n            Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            }));\n        fileUpload(files);\n    };\n    const onDrop = (accepted: any, rejected: any) => {\n        if (Object.keys(rejected).length !== 0) {\n            const message = \"Please submit valid file type\";\n        } else {\n            addFile(accepted);\n            setPreview(accepted[0].preview);\n\n            const blobPromise = new Promise((resolve, reject) => {\n                const reader = new window.FileReader();\n                reader.readAsDataURL(accepted[0]);\n                reader.onloadend = () => {\n                    const base64data = reader.result;\n                    resolve(base64data);\n                };\n            });\n            blobPromise.then(value => {\n                // console.log('value', value);\n            });\n        }\n    };\n\n    return (\n        <Dropzone onDrop={(accepted, rejected) => onDrop(accepted, rejected)}>\n            {({ getRootProps, getInputProps }) => (\n                <div className=\"container\" style={ { borderWidth: 2, borderColor: 'rgb(187, 187, 187)', borderStyle: 'dashed', height: 500, padding: 170 } }>\n                    <div\n                        {...getRootProps({\n                            className: 'dropzone',\n                            onDrop: event => event.stopPropagation()\n                        })}\n                    >\n                        <input {...getInputProps()} />\n                        <label className=\"w-64 flex flex-col items-center px-4 py-6 bg-red-500 text-white font-extrabold rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer hover:bg-blue hover:text-white\">\n                            <svg className=\"w-8 h-8\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                                <path d=\"M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z\" />\n                            </svg>\n                            <span className=\"mt-2 text-base leading-normal\">사진 업로드</span>\n                        </label>\n                        <span className=\"mt-2 text-base leading-normal\">또는 사진을 드래그하세요.</span>\n                    </div>\n                </div>\n            )}\n        </Dropzone>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}