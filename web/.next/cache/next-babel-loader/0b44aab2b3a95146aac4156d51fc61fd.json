{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const SelectRoomsDocument = gql`\n    query selectRooms($skip: Float!, $take: Float!) {\n  selectRooms(skip: $skip, take: $take) {\n    id\n    name\n    city\n    address\n    description\n    price\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\nexport function useSelectRoomsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SelectRoomsDocument, baseOptions);\n}\nexport function useSelectRoomsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SelectRoomsDocument, baseOptions);\n}\nexport const SelectAllRoomsDocument = gql`\n    query selectAllRooms {\n  selectAllRooms {\n    id\n    name\n    description\n    country\n    city\n    price\n    address\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\nexport function useSelectAllRoomsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SelectAllRoomsDocument, baseOptions);\n}\nexport function useSelectAllRoomsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SelectAllRoomsDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n    refreshToken\n  }\n}\n    `;\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport function useLogoutMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LogoutDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    name\n  }\n}\n    `;\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $name: String) {\n  register(email: $email, password: $password, name: $name)\n}\n    `;\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}\nexport const RequestAuthEmailDocument = gql`\n    mutation RequestAuthEmail($email: String!, $message: String!) {\n  requestAuthEmail(email: $email, message: $message)\n}\n    `;\nexport function useRequestAuthEmailMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RequestAuthEmailDocument, baseOptions);\n}\nexport const NewEmailDocument = gql`\n    subscription newEmail {\n  newEmail\n}\n    `;\nexport function useNewEmailSubscription(baseOptions) {\n  return ApolloReactHooks.useSubscription(NewEmailDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    avatar\n    email\n    roomConnection {\n      id\n      name\n      description\n      photoConnection {\n        id\n        file\n        caption\n      }\n    }\n  }\n}\n    `;\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb/web/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","SelectRoomsDocument","useSelectRoomsQuery","baseOptions","useQuery","useSelectRoomsLazyQuery","useLazyQuery","SelectAllRoomsDocument","useSelectAllRoomsQuery","useSelectAllRoomsLazyQuery","LoginDocument","useLoginMutation","useMutation","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","useMeLazyQuery","RegisterDocument","useRegisterMutation","RequestAuthEmailDocument","useRequestAuthEmailMutation","NewEmailDocument","useNewEmailSubscription","useSubscription","UsersDocument","useUsersQuery","useUsersLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAuZA,OAAO,MAAMC,mBAAmB,GAAGF,GAAI;;;;;;;;;;;;;;;;KAAhC;AAkBH,OAAO,SAASG,mBAAT,CAA6BC,WAA7B,EAA2H;AAChI,SAAOH,gBAAgB,CAACI,QAAjB,CAAuEH,mBAAvE,EAA4FE,WAA5F,CAAP;AACD;AACC,OAAO,SAASE,uBAAT,CAAiCF,WAAjC,EAAmI;AACxI,SAAOH,gBAAgB,CAACM,YAAjB,CAA2EL,mBAA3E,EAAgGE,WAAhG,CAAP;AACD;AAIP,OAAO,MAAMI,sBAAsB,GAAGR,GAAI;;;;;;;;;;;;;;;;;KAAnC;AAmBH,OAAO,SAASS,sBAAT,CAAgCL,WAAhC,EAAoI;AACzI,SAAOH,gBAAgB,CAACI,QAAjB,CAA6EG,sBAA7E,EAAqGJ,WAArG,CAAP;AACD;AACC,OAAO,SAASM,0BAAT,CAAoCN,WAApC,EAA4I;AACjJ,SAAOH,gBAAgB,CAACM,YAAjB,CAAiFC,sBAAjF,EAAyGJ,WAAzG,CAAP;AACD;AAIP,OAAO,MAAMO,aAAa,GAAGX,GAAI;;;;;;;;;;;KAA1B;AAcH,OAAO,SAASY,gBAAT,CAA0BR,WAA1B,EAAqH;AAC1H,SAAOH,gBAAgB,CAACY,WAAjB,CAAoEF,aAApE,EAAmFP,WAAnF,CAAP;AACD;AAIL,OAAO,MAAMU,cAAc,GAAGd,GAAI;;;;KAA3B;AAOH,OAAO,SAASe,iBAAT,CAA2BX,WAA3B,EAAwH;AAC7H,SAAOH,gBAAgB,CAACY,WAAjB,CAAsEC,cAAtE,EAAsFV,WAAtF,CAAP;AACD;AAIL,OAAO,MAAMY,UAAU,GAAGhB,GAAI;;;;;;;;KAAvB;AAUH,OAAO,SAASiB,UAAT,CAAoBb,WAApB,EAAgG;AACrG,SAAOH,gBAAgB,CAACI,QAAjB,CAAqDW,UAArD,EAAiEZ,WAAjE,CAAP;AACD;AACC,OAAO,SAASc,cAAT,CAAwBd,WAAxB,EAAwG;AAC7G,SAAOH,gBAAgB,CAACM,YAAjB,CAAyDS,UAAzD,EAAqEZ,WAArE,CAAP;AACD;AAIP,OAAO,MAAMe,gBAAgB,GAAGnB,GAAI;;;;KAA7B;AAOH,OAAO,SAASoB,mBAAT,CAA6BhB,WAA7B,EAA8H;AACnI,SAAOH,gBAAgB,CAACY,WAAjB,CAA0EM,gBAA1E,EAA4Ff,WAA5F,CAAP;AACD;AAIL,OAAO,MAAMiB,wBAAwB,GAAGrB,GAAI;;;;KAArC;AAOH,OAAO,SAASsB,2BAAT,CAAqClB,WAArC,EAAsJ;AAC3J,SAAOH,gBAAgB,CAACY,WAAjB,CAA0FQ,wBAA1F,EAAoHjB,WAApH,CAAP;AACD;AAIL,OAAO,MAAMmB,gBAAgB,GAAGvB,GAAI;;;;KAA7B;AAMH,OAAO,SAASwB,uBAAT,CAAiCpB,WAAjC,EAA8I;AACnJ,SAAOH,gBAAgB,CAACwB,eAAjB,CAAsFF,gBAAtF,EAAwGnB,WAAxG,CAAP;AACD;AAGL,OAAO,MAAMsB,aAAa,GAAG1B,GAAI;;;;;;;;;;;;;;;;;;;KAA1B;AAqBH,OAAO,SAAS2B,aAAT,CAAuBvB,WAAvB,EAAyG;AAC9G,SAAOH,gBAAgB,CAACI,QAAjB,CAA2DqB,aAA3D,EAA0EtB,WAA1E,CAAP;AACD;AACC,OAAO,SAASwB,iBAAT,CAA2BxB,WAA3B,EAAiH;AACtH,SAAOH,gBAAgB,CAACM,YAAjB,CAA+DmB,aAA/D,EAA8EtB,WAA9E,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n  JSON: any,\n};\n\nexport type Comment = {\n   __typename?: 'Comment',\n  nickname?: Maybe<Scalars['String']>,\n  content: Scalars['String'],\n  date: Scalars['DateTime'],\n};\n\nexport type CommentInput = {\n  recipeId: Scalars['ID'],\n  nickname?: Maybe<Scalars['String']>,\n  content: Scalars['String'],\n};\n\nexport type Conversation = {\n   __typename?: 'Conversation',\n  id: Scalars['Int'],\n  participants: Array<Scalars['JSON']>,\n};\n\n\nexport type Email = {\n   __typename?: 'Email',\n  nickname?: Maybe<Scalars['String']>,\n  content: Scalars['String'],\n  date: Scalars['DateTime'],\n};\n\nexport type EmailInput = {\n  recipeId: Scalars['ID'],\n  nickname?: Maybe<Scalars['String']>,\n  content: Scalars['String'],\n};\n\n\nexport type List = {\n   __typename?: 'List',\n  id: Scalars['Int'],\n  name: Scalars['String'],\n  user: Scalars['JSON'],\n  rooms: Array<Scalars['JSON']>,\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  refreshToken: Scalars['String'],\n  user: User,\n};\n\nexport type Message = {\n   __typename?: 'Message',\n  id: Scalars['Int'],\n  message: Scalars['String'],\n  user: User,\n  conversation: Conversation,\n};\n\nexport type Movie = {\n   __typename?: 'Movie',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  minutes: Scalars['Int'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokensForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  registerFake: Scalars['Boolean'],\n  updateUser: Scalars['Boolean'],\n  deleteUser: Scalars['Boolean'],\n  push: Scalars['Boolean'],\n  createRoom: Room,\n  createFakeRoom: Room,\n  createPhoto: Photo,\n  createFakePhoto: Photo,\n  updateRoom: Room,\n  deleteRoom: Scalars['Boolean'],\n  deletePhoto: Scalars['Boolean'],\n  addNewComment: Scalars['Boolean'],\n  requestAuthEmail: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  name?: Maybe<Scalars['String']>,\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationUpdateUserArgs = {\n  id: Scalars['Float'],\n  input: UserInput\n};\n\n\nexport type MutationCreateRoomArgs = {\n  options: RoomInput\n};\n\n\nexport type MutationCreatePhotoArgs = {\n  options: PhotoInput\n};\n\n\nexport type MutationUpdateRoomArgs = {\n  id: Scalars['Float'],\n  options: RoomInput\n};\n\n\nexport type MutationAddNewCommentArgs = {\n  comment: CommentInput\n};\n\n\nexport type MutationRequestAuthEmailArgs = {\n  message: Scalars['String'],\n  email: Scalars['String']\n};\n\nexport type Photo = {\n   __typename?: 'Photo',\n  id: Scalars['ID'],\n  caption: Scalars['String'],\n  file: Scalars['String'],\n  room: Room,\n};\n\nexport type PhotoInput = {\n  caption: Scalars['String'],\n  file: Scalars['String'],\n  roomId: Scalars['Float'],\n  hostId: Scalars['Float'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  users: Array<User>,\n  selectUser: User,\n  me?: Maybe<User>,\n  selectAllPhotos: Array<Photo>,\n  selectAllRooms: Array<Room>,\n  selectRooms: Array<Room>,\n  recipe?: Maybe<Recipe>,\n};\n\n\nexport type QuerySelectUserArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type QuerySelectRoomsArgs = {\n  take: Scalars['Float'],\n  skip: Scalars['Float']\n};\n\n\nexport type QueryRecipeArgs = {\n  id: Scalars['ID']\n};\n\nexport type Recipe = {\n   __typename?: 'Recipe',\n  id: Scalars['ID'],\n  title: Scalars['String'],\n  description?: Maybe<Scalars['String']>,\n  comments: Array<Comment>,\n};\n\nexport type Reservation = {\n   __typename?: 'Reservation',\n  id: Scalars['Int'],\n  check_in: Scalars['Int'],\n  check_out: Scalars['Int'],\n  guest: Scalars['JSON'],\n  room: Scalars['JSON'],\n  in_progress: Scalars['Boolean'],\n  is_finished: Scalars['Boolean'],\n};\n\nexport type Review = {\n   __typename?: 'Review',\n  id: Scalars['Int'],\n  review: Scalars['String'],\n  accuracy: Scalars['Int'],\n  communication: Scalars['Int'],\n  cleanliness: Scalars['Int'],\n  location: Scalars['Int'],\n  check_in: Scalars['Int'],\n  value: Scalars['Int'],\n  user: Scalars['JSON'],\n  room: Scalars['JSON'],\n};\n\nexport type Room = {\n   __typename?: 'Room',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  description: Scalars['String'],\n  country: Scalars['String'],\n  city: Scalars['String'],\n  price: Scalars['Int'],\n  address: Scalars['String'],\n  guests: Scalars['Int'],\n  beds: Scalars['Int'],\n  bedrooms: Scalars['Int'],\n  baths: Scalars['Int'],\n  check_in: Scalars['Int'],\n  check_out: Scalars['Int'],\n  instant_book: Scalars['Boolean'],\n  room_type: Scalars['String'],\n  photoConnection: Array<Photo>,\n  user: User,\n};\n\nexport type RoomInput = {\n  name: Scalars['String'],\n  country: Scalars['String'],\n  description: Scalars['String'],\n  city: Scalars['String'],\n  price: Scalars['Int'],\n  address: Scalars['String'],\n  userId: Scalars['Float'],\n};\n\nexport type Subscription = {\n   __typename?: 'Subscription',\n  newComments: Comment,\n  newEmail: Scalars['JSON'],\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  email: Scalars['String'],\n  name: Scalars['String'],\n  password: Scalars['String'],\n  avatar: Scalars['String'],\n  gender: Scalars['String'],\n  birthdate: Scalars['DateTime'],\n  language: Scalars['String'],\n  currentcy: Scalars['String'],\n  superhost: Scalars['Boolean'],\n  email_verified: Scalars['Boolean'],\n  email_secret: Scalars['String'],\n  login_method: Scalars['String'],\n  tokenVersion: Scalars['String'],\n  roomConnection: Array<Room>,\n};\n\nexport type UserInput = {\n  name: Scalars['String'],\n};\n\nexport type SelectRoomsQueryVariables = {\n  skip: Scalars['Float'],\n  take: Scalars['Float']\n};\n\n\nexport type SelectRoomsQuery = (\n  { __typename?: 'Query' }\n  & { selectRooms: Array<(\n    { __typename?: 'Room' }\n    & Pick<Room, 'id' | 'name' | 'city' | 'address' | 'description' | 'price'>\n    & { photoConnection: Array<(\n      { __typename?: 'Photo' }\n      & Pick<Photo, 'id' | 'caption' | 'file'>\n    )> }\n  )> }\n);\n\nexport type SelectAllRoomsQueryVariables = {};\n\n\nexport type SelectAllRoomsQuery = (\n  { __typename?: 'Query' }\n  & { selectAllRooms: Array<(\n    { __typename?: 'Room' }\n    & Pick<Room, 'id' | 'name' | 'description' | 'country' | 'city' | 'price' | 'address'>\n    & { photoConnection: Array<(\n      { __typename?: 'Photo' }\n      & Pick<Photo, 'id' | 'caption' | 'file'>\n    )> }\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken' | 'refreshToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'name'>\n  )> }\n);\n\nexport type RegisterMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String'],\n  name?: Maybe<Scalars['String']>\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type RequestAuthEmailMutationVariables = {\n  email: Scalars['String'],\n  message: Scalars['String']\n};\n\n\nexport type RequestAuthEmailMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'requestAuthEmail'>\n);\n\nexport type NewEmailSubscriptionVariables = {};\n\n\nexport type NewEmailSubscription = (\n  { __typename?: 'Subscription' }\n  & Pick<Subscription, 'newEmail'>\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'avatar' | 'email'>\n    & { roomConnection: Array<(\n      { __typename?: 'Room' }\n      & Pick<Room, 'id' | 'name' | 'description'>\n      & { photoConnection: Array<(\n        { __typename?: 'Photo' }\n        & Pick<Photo, 'id' | 'file' | 'caption'>\n      )> }\n    )> }\n  )> }\n);\n\n\nexport const SelectRoomsDocument = gql`\n    query selectRooms($skip: Float!, $take: Float!) {\n  selectRooms(skip: $skip, take: $take) {\n    id\n    name\n    city\n    address\n    description\n    price\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\n\n    export function useSelectRoomsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SelectRoomsQuery, SelectRoomsQueryVariables>) {\n      return ApolloReactHooks.useQuery<SelectRoomsQuery, SelectRoomsQueryVariables>(SelectRoomsDocument, baseOptions);\n    }\n      export function useSelectRoomsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SelectRoomsQuery, SelectRoomsQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<SelectRoomsQuery, SelectRoomsQueryVariables>(SelectRoomsDocument, baseOptions);\n      }\n      \nexport type SelectRoomsQueryHookResult = ReturnType<typeof useSelectRoomsQuery>;\nexport type SelectRoomsQueryResult = ApolloReactCommon.QueryResult<SelectRoomsQuery, SelectRoomsQueryVariables>;\nexport const SelectAllRoomsDocument = gql`\n    query selectAllRooms {\n  selectAllRooms {\n    id\n    name\n    description\n    country\n    city\n    price\n    address\n    photoConnection {\n      id\n      caption\n      file\n    }\n  }\n}\n    `;\n\n    export function useSelectAllRoomsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SelectAllRoomsQuery, SelectAllRoomsQueryVariables>) {\n      return ApolloReactHooks.useQuery<SelectAllRoomsQuery, SelectAllRoomsQueryVariables>(SelectAllRoomsDocument, baseOptions);\n    }\n      export function useSelectAllRoomsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SelectAllRoomsQuery, SelectAllRoomsQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<SelectAllRoomsQuery, SelectAllRoomsQueryVariables>(SelectAllRoomsDocument, baseOptions);\n      }\n      \nexport type SelectAllRoomsQueryHookResult = ReturnType<typeof useSelectAllRoomsQuery>;\nexport type SelectAllRoomsQueryResult = ApolloReactCommon.QueryResult<SelectAllRoomsQuery, SelectAllRoomsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n    export function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n      return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n    }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n    export function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n      return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n    }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n    name\n  }\n}\n    `;\n\n    export function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n      return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n    }\n      export function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\n      \nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $name: String) {\n  register(email: $email, password: $password, name: $name)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n    export function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n      return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n    }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const RequestAuthEmailDocument = gql`\n    mutation RequestAuthEmail($email: String!, $message: String!) {\n  requestAuthEmail(email: $email, message: $message)\n}\n    `;\nexport type RequestAuthEmailMutationFn = ApolloReactCommon.MutationFunction<RequestAuthEmailMutation, RequestAuthEmailMutationVariables>;\n\n    export function useRequestAuthEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RequestAuthEmailMutation, RequestAuthEmailMutationVariables>) {\n      return ApolloReactHooks.useMutation<RequestAuthEmailMutation, RequestAuthEmailMutationVariables>(RequestAuthEmailDocument, baseOptions);\n    }\nexport type RequestAuthEmailMutationHookResult = ReturnType<typeof useRequestAuthEmailMutation>;\nexport type RequestAuthEmailMutationResult = ApolloReactCommon.MutationResult<RequestAuthEmailMutation>;\nexport type RequestAuthEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<RequestAuthEmailMutation, RequestAuthEmailMutationVariables>;\nexport const NewEmailDocument = gql`\n    subscription newEmail {\n  newEmail\n}\n    `;\n\n    export function useNewEmailSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<NewEmailSubscription, NewEmailSubscriptionVariables>) {\n      return ApolloReactHooks.useSubscription<NewEmailSubscription, NewEmailSubscriptionVariables>(NewEmailDocument, baseOptions);\n    }\nexport type NewEmailSubscriptionHookResult = ReturnType<typeof useNewEmailSubscription>;\nexport type NewEmailSubscriptionResult = ApolloReactCommon.SubscriptionResult<NewEmailSubscription>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    name\n    avatar\n    email\n    roomConnection {\n      id\n      name\n      description\n      photoConnection {\n        id\n        file\n        caption\n      }\n    }\n  }\n}\n    `;\n\n    export function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n      return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n    }\n      export function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\n      \nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;"]},"metadata":{},"sourceType":"module"}