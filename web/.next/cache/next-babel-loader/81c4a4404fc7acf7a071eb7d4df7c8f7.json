{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\nimport { IS_PRODUCTION, API_PRODUCTION, API_DEVELOPMENT } from \"../env\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client\n    }));\n  };\n\n  if (false) {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, cookies, response, data, pageProps;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = \"\";\n\n              if (!isServer()) {\n                _context.next = 12;\n                break;\n              }\n\n              cookies = cookie.parse(\"\".concat(req.headers.cookie));\n\n              if (!cookies.jid) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch(IS_PRODUCTION ? \"\".concat(API_PRODUCTION, \"/refresh_token\") : \"\".concat(API_DEVELOPMENT, \"/refresh_token\"), {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                  cookie: \"jid=\" + cookies.jid\n                }\n              }));\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              data = _context.sent;\n              serverAccessToken = data.accessToken;\n\n            case 12:\n              if (!PageComponent.getInitialProps) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 15:\n              _context.t0 = _context.sent;\n              _context.next = 19;\n              break;\n\n            case 18:\n              _context.t0 = {};\n\n            case 19:\n              pageProps = _context.t0;\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps));\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var httpLink = new HttpLink({\n    uri: IS_PRODUCTION ? \"\".concat(API_PRODUCTION, \"/graphql\") : \"\".concat(API_DEVELOPMENT, \"/graphql\"),\n    credentials: \"include\",\n    fetch: fetch\n  });\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (_Date$now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      return fetch(IS_PRODUCTION ? \"\".concat(API_PRODUCTION, \"/refresh_token\") : \"\".concat(API_DEVELOPMENT, \"/refresh_token\"), {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  var authLink = setContext(function (_request, _ref3) {\n    var headers = _ref3.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref4) {\n    var graphQLErrors = _ref4.graphQLErrors,\n        networkError = _ref4.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}